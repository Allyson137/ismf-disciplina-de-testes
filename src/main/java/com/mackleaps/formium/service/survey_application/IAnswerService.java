package com.mackleaps.formium.service.survey_application;

import com.mackleaps.formium.model.survey_application.Answer;
import com.mackleaps.formium.model.survey_application.SurveyResults;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;

import java.util.List;

public interface IAnswerService {

    /**
     * @param containerId of corresponding <code>Container</code>
     * @param companyId of corresponding Company <code>Company</code>
     * @return a list of answers given by the company to the questions of the specified container
     * @throws ResourceNotFoundException if company of container do not exist
     * @throws IllegalStateException if company trying to answer specified
     * <code>Container</code> is not associated to its corresponding Survey
     */
    List<Answer> getAnswersForCompanyAndContainer(Long containerId, Long companyId) throws ResourceNotFoundException,
                                                                                           IllegalStateException;

    /**
     * Associate a <code>Company</code> to a <code>Survey</code> by creating <code>SurveyResults</code> association
     * entity so that it will be able to answer specified survey and have their answers registered
     * @param surveyId of corresponding <code>Survey</code>
     * @param companyId of corresponding <code>Company</code>
     * @return <code>SurveyResults</code> generated by associating entities
     * @throws ResourceNotFoundException in case either <code>Survey</code> or <code>Company</code> with informed ids do
     * not exist
     * @throws IllegalStateException in case company is already associated to survey
     */
    SurveyResults associateCompanyToSurvey(Long surveyId, Long companyId) throws ResourceNotFoundException,
                                                                                 IllegalStateException;

    /**
     * Check if association between company and survey exists
     * @param surveyId of the said survey
     * @param companyId of the said company
     * @return whether or not there is a SurveyResults binding them
     * */
    boolean isCompanyAnsweringSurvey(Long surveyId, Long companyId);

    /**
     * Receives a list of answers and the id of the user responsible for providing them, as well as its company
     * And persists them on the corresponding SurveyResults
     * @param answers to be persisted
     * @param companyId corresponding to the company for whom the employee is answering the survey for
     * @param userId corresponding to the employee responsible for providing the answers
     * @param currentCategoryId for the category whose questions are being answered
     * @return the SurveyResults related to the current employee
     * */
    SurveyResults provideMultipleAnswers(List<? extends Answer> answers, Long companyId, Long userId, Long currentCategoryId);


    /**
     * Get a list of answer for the questions of current category provided by a certain company
     * If company with id of <code>companyId</code> answered any question,
     * select those values and return as values for answers
     * @param currentCategoryId for the category to be considered on this process
     * @param companyId for the company with the answers to be considered
     * @return a <code>List<Answer></code> with the values described
     * */
    List<Answer> getMergedListOfQuestionsAndAnswersForCompany(Long currentCategoryId, Long companyId);


}
